// This example shows how to subscribe to multiple input topics.
//
// NOTE:
// User Scripts can subscribe to multiple input topics, but can only publish on a single topic.

import { Input } from "./types";

type Output = { topic: string };
type GlobalVariables = { id: number };

// List all the input topics in the `input` array
export const inputs = ["/input/topic", "/input/another"];
export const output = "/studio_script/output_topic";

// Make an InputEvent type alias. Since our node will get a message from either input topic, we need to enumerate the topics.
type InputEvent = Input<"/input/topic"> | Input<"/input/another">;

export default function script(event: InputEvent, globalVars: GlobalVariables): Output {
  // Remember that your node will get messages on each topic, so you
  // need to check each event's topic to know which fields are available on the message.
  switch (event.topic) {
    case "/input/topic":
      // topic specific input logic
      // Our message fields are specific to our topic message
      break;
    case "/input/another":
      // another specific logic
      break;
  }

  // Nodes can only output one type of message regardless of the inputs
  // Here we echo back the input topic as an example.
  return {
    topic: event.topic,
  };
};
